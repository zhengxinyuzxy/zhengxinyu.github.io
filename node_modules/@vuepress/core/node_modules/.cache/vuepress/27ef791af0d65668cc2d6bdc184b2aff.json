{"remainingRequest":"D:\\zhengxinyuzxy.github.io\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!D:\\zhengxinyuzxy.github.io\\node_modules\\@vuepress\\core\\lib\\client\\util.js","dependencies":[{"path":"D:\\zhengxinyuzxy.github.io\\node_modules\\@vuepress\\core\\lib\\client\\util.js","mtime":1689759593208},{"path":"D:\\zhengxinyuzxy.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1689759593638},{"path":"D:\\zhengxinyuzxy.github.io\\node_modules\\babel-loader\\lib\\index.js","mtime":1689759593547}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucHVzaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmVycm9yLmNhdXNlLmpzIjsKaW1wb3J0IFZ1ZSBmcm9tICd2dWUnOwppbXBvcnQgbGF5b3V0Q29tcG9uZW50cyBmcm9tICdAaW50ZXJuYWwvbGF5b3V0LWNvbXBvbmVudHMnOwppbXBvcnQgcGFnZUNvbXBvbmVudHMgZnJvbSAnQGludGVybmFsL3BhZ2UtY29tcG9uZW50cyc7CgovKioNCiAqIENyZWF0ZSBhIGNhY2hlZCB2ZXJzaW9uIG9mIGEgcHVyZSBmdW5jdGlvbi4NCiAqLwpmdW5jdGlvbiBjYWNoZWQoZm4pIHsKICBjb25zdCBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXMKICByZXR1cm4gZnVuY3Rpb24gY2FjaGVkRm4oc3RyKSB7CiAgICBjb25zdCBoaXQgPSBjYWNoZVtzdHJdOwogICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJldHVybi1hc3NpZ24KICAgIHJldHVybiBoaXQgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKTsKICB9Owp9CgovKioNCiAqIENhbWVsaXplIGEgaHlwaGVuLWRlbGltaXRlZCBzdHJpbmcuDQogKi8KY29uc3QgY2FtZWxpemVSRSA9IC8tKFx3KS9nOwpjb25zdCBjYW1lbGl6ZSA9IGNhY2hlZChzdHIgPT4gewogIHJldHVybiBzdHIucmVwbGFjZShjYW1lbGl6ZVJFLCAoXywgYykgPT4gYyA/IGMudG9VcHBlckNhc2UoKSA6ICcnKTsKfSk7CgovKioNCiAqIEh5cGhlbmF0ZSBhIGNhbWVsQ2FzZSBzdHJpbmcuDQogKi8KY29uc3QgaHlwaGVuYXRlUkUgPSAvXEIoW0EtWl0pL2c7CmNvbnN0IGh5cGhlbmF0ZSA9IGNhY2hlZChzdHIgPT4gewogIHJldHVybiBzdHIucmVwbGFjZShoeXBoZW5hdGVSRSwgJy0kMScpLnRvTG93ZXJDYXNlKCk7Cn0pOwoKLyoqDQogKiBDYXBpdGFsaXplIGEgc3RyaW5nLg0KICovCmNvbnN0IGNhcGl0YWxpemUgPSBjYWNoZWQoc3RyID0+IHsKICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpOwp9KTsKCi8qKg0KICogVGhpcyBtZXRob2Qgd2FzIGZvciBzZWN1cmVseSBnZXR0aW5nIFZ1ZSBjb21wb25lbnQgd2hlbiBjb21wb25lbnRzDQogKiBhcmUgbmFtZWQgaW4gZGlmZmVyZW50IHN0eWxlLg0KICoNCiAqIGUuZy4gYSBjb21wb25lbnQgbmFtZWQgYGEtYmAgY2FuIGJlIGFsc28gZ2V0dGVkIGJ5IGBBQmAsIEl0J3MgdGhlDQogKiBzYW1lIHRoZSBvdGhlciB3YXkgcm91bmQNCiAqDQogKiBAcGFyYW0ge2Z1bmN0aW9ufSBnZXR0ZXIgYSBmdW5jdGlvbiBvZiBnZXR0aW5nIGNvbXBvbmVudCBieSBuYW1lDQogKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBjb21wb25lbnQncyBuYW1lDQogKiBAcmV0dXJucyB7Q29tcG9uZW50fEFzeW5jQ29tcG9uZW50fQ0KICovCmV4cG9ydCBmdW5jdGlvbiBnZXRDb21wb25lbnQoZ2V0dGVyLCBuYW1lKSB7CiAgaWYgKCFuYW1lKSByZXR1cm47CiAgaWYgKGdldHRlcihuYW1lKSkgcmV0dXJuIGdldHRlcihuYW1lKTsKICBjb25zdCBpc0tlYmFiQ2FzZSA9IG5hbWUuaW5jbHVkZXMoJy0nKTsKICBpZiAoaXNLZWJhYkNhc2UpIHJldHVybiBnZXR0ZXIoY2FwaXRhbGl6ZShjYW1lbGl6ZShuYW1lKSkpOwogIHJldHVybiBnZXR0ZXIoY2FwaXRhbGl6ZShuYW1lKSkgfHwgZ2V0dGVyKGh5cGhlbmF0ZShuYW1lKSk7Cn0KY29uc3QgYXN5bmNDb21wb25lbnRzID0gT2JqZWN0LmFzc2lnbih7fSwgbGF5b3V0Q29tcG9uZW50cywgcGFnZUNvbXBvbmVudHMpOwpjb25zdCBhc3luY0NvbXBvbmVudHNHZXR0ZXIgPSBuYW1lID0+IGFzeW5jQ29tcG9uZW50c1tuYW1lXTsKY29uc3QgcGFnZUNvbXBvbmVudHNHZXR0ZXIgPSBsYXlvdXQgPT4gcGFnZUNvbXBvbmVudHNbbGF5b3V0XTsKY29uc3QgbGF5b3V0Q29tcG9uZW50c0dldHRlciA9IGxheW91dCA9PiBsYXlvdXRDb21wb25lbnRzW2xheW91dF07CmNvbnN0IGdsb2JhbENvbXBvbmVudHNHZXR0ZXIgPSBuYW1lID0+IFZ1ZS5jb21wb25lbnQobmFtZSk7CmV4cG9ydCBmdW5jdGlvbiBnZXRQYWdlQXN5bmNDb21wb25lbnQocGFnZUtleSkgewogIHJldHVybiBnZXRDb21wb25lbnQocGFnZUNvbXBvbmVudHNHZXR0ZXIsIHBhZ2VLZXkpOwp9CmV4cG9ydCBmdW5jdGlvbiBnZXRMYXlvdXRBc3luY0NvbXBvbmVudChsYXlvdXQpIHsKICByZXR1cm4gZ2V0Q29tcG9uZW50KGxheW91dENvbXBvbmVudHNHZXR0ZXIsIGxheW91dCk7Cn0KZXhwb3J0IGZ1bmN0aW9uIGdldEFzeW5jQ29tcG9uZW50KG5hbWUpIHsKICByZXR1cm4gZ2V0Q29tcG9uZW50KGFzeW5jQ29tcG9uZW50c0dldHRlciwgbmFtZSk7Cn0KZXhwb3J0IGZ1bmN0aW9uIGdldFZ1ZUNvbXBvbmVudChuYW1lKSB7CiAgcmV0dXJuIGdldENvbXBvbmVudChnbG9iYWxDb21wb25lbnRzR2V0dGVyLCBuYW1lKTsKfQpleHBvcnQgZnVuY3Rpb24gZW5zdXJlQXN5bmNDb21wb25lbnRzTG9hZGVkKC4uLm5hbWVzKSB7CiAgcmV0dXJuIFByb21pc2UuYWxsKG5hbWVzLmZpbHRlcih2ID0+IHYpLm1hcChhc3luYyBuYW1lID0+IHsKICAgIGlmICghZ2V0VnVlQ29tcG9uZW50KG5hbWUpICYmIGdldEFzeW5jQ29tcG9uZW50KG5hbWUpKSB7CiAgICAgIGNvbnN0IGNvbXAgPSBhd2FpdCBnZXRBc3luY0NvbXBvbmVudChuYW1lKSgpOwogICAgICBWdWUuY29tcG9uZW50KG5hbWUsIGNvbXAuZGVmYXVsdCk7CiAgICB9CiAgfSkpOwp9CgovKioNCiAqIEluamVjdCBvcHRpb24gdG8gVnVlIFNGQw0KICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMNCiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkNCiAqIEBwYXJhbSB7YW55fSB2YWx1ZQ0KICovCmV4cG9ydCBmdW5jdGlvbiBpbmplY3RDb21wb25lbnRPcHRpb24ob3B0aW9ucywga2V5LCB2YWx1ZSkgewogIGNvbnN0IGFycmF5SW5qZWN0ID0gKCkgPT4gewogICAgaWYgKCFvcHRpb25zW2tleV0pIG9wdGlvbnNba2V5XSA9IFtdOwogICAgb3B0aW9uc1trZXldLnB1c2goLi4udmFsdWUpOwogIH07CiAgY29uc3Qgb2JqZWN0SW5qZWN0ID0gKCkgPT4gewogICAgaWYgKCFvcHRpb25zW2tleV0pIG9wdGlvbnNba2V5XSA9IHt9OwogICAgT2JqZWN0LmFzc2lnbihvcHRpb25zW2tleV0sIHZhbHVlKTsKICB9OwogIC8vIGNvbnN0IHByaW1pdGl2ZUluamVjdCA9ICgpID0+IG9wdGlvbnNba2V5XSA9IHZhbHVlCgogIHN3aXRjaCAoa2V5KSB7CiAgICBjYXNlICdjb21wb25lbnRzJzoKICAgICAgb2JqZWN0SW5qZWN0KCk7CiAgICAgIGJyZWFrOwogICAgY2FzZSAnbWl4aW5zJzoKICAgICAgYXJyYXlJbmplY3QoKTsKICAgICAgYnJlYWs7CiAgICBkZWZhdWx0OgogICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gb3B0aW9uIG5hbWUuJyk7CiAgfQp9CmV4cG9ydCBmdW5jdGlvbiBmaW5kUGFnZUZvclBhdGgocGFnZXMsIHBhdGgpIHsKICBmb3IgKGxldCBpID0gMDsgaSA8IHBhZ2VzLmxlbmd0aDsgaSsrKSB7CiAgICBjb25zdCBwYWdlID0gcGFnZXNbaV07CiAgICBpZiAocGFnZS5wYXRoID09PSBwYXRoKSB7CiAgICAgIHJldHVybiBwYWdlOwogICAgfQogIH0KICByZXR1cm4gewogICAgcGF0aDogJycsCiAgICBmcm9udG1hdHRlcjoge30KICB9Owp9CmV4cG9ydCBmdW5jdGlvbiBmaW5kUGFnZUJ5S2V5KHBhZ2VzLCBrZXkpIHsKICBmb3IgKGxldCBpID0gMDsgaSA8IHBhZ2VzLmxlbmd0aDsgaSsrKSB7CiAgICBjb25zdCBwYWdlID0gcGFnZXNbaV07CiAgICBpZiAocGFnZS5rZXkgPT09IGtleSkgewogICAgICByZXR1cm4gcGFnZTsKICAgIH0KICB9CiAgcmV0dXJuIHsKICAgIHBhdGg6ICcnLAogICAgZnJvbnRtYXR0ZXI6IHt9CiAgfTsKfQoKLyoqDQogKiBOb3JtYWxpemUgY29uZmlnLg0KICogVGhpcyB1dGlsaXR5IGlzIG1haW5seSBmb3IgcGx1Z2luIGRldmVsb3BlcnMuIEZvciBzb21lDQogKiBwbHVnaW5zIHRoYXQgbmVlZCBpbnRlcm5hdGlvbmFsaXplIHRoZSB0ZXh0LiBidXQgaXQncw0KICogbm90IHJlY29tbWVuYmRlZCB0byBsZXQgcGx1Z2luIGNhcmUgYWJvdXQgdG8gdGhlIGludGVybmFsDQogKiBpMThuIGltcGxlbWVudGF0aW9uLCBzbyB0aGlzIHV0aWxpdHkgd2FzIGJvcm4uDQogKg0KICoNCiAqIFVzYWdlOg0KICoNCiAqIGltcG9ydCB7IG5vcm1hbGl6ZUNvbmZpZyB9IGZyb20gJ0BhcHAvdXRpbCcNCiAqIGV4cG9ydCBkZWZhdWx0IHsNCiAqICAgZGF0YSAoKSB7DQogKiAgICAgcmV0dXJuIHsgY29uZmlnIH0NCiAqICAgfQ0KICogICBjb21wdXRlZDogew0KICogICAgIG5vcm1hbGl6ZWRDb25maWcoKSB7DQogKiAgICAgICByZXR1cm4gbm9ybWFsaXplQ29uZmlnKHRoaXMsIGNvbmZpZykNCiAqICAgICB9DQogKiAgIH0NCiAqIH0NCiAqDQogKg0KICogZS5nLg0KICoNCiAqIENvbmZpZzogOiAnVGV4dCcNCiAqIE5vcm1hbGl6ZWQgQ29uZmlnOiAnVGV4dCcNCiAqDQogKiBDb25maWc6IDogeyAnLyc6ICdUZXh0JywgJy96aC8nOiAn5paH5pysJyB9DQogKiBOb3JtYWxpemVkIENvbmZpZzogJ1RleHQnIG9yICfmlofmnKwnDQogKg0KICogQHBhcmFtIHtWdWV9IGNvbXBvbmVudA0KICogQHBhcmFtIHthbnl9IHJhd0NvbmZpZw0KICogQHJldHVybnMge2FueX0NCiAqLwpleHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplQ29uZmlnKGNvbXBvbmVudCwgcmF3Q29uZmlnKSB7CiAgY29uc3QgewogICAgJGxvY2FsZVBhdGgKICB9ID0gY29tcG9uZW50OwogIGlmICh0eXBlb2YgcmF3Q29uZmlnID09PSAnb2JqZWN0JyAmJiByYXdDb25maWdbJGxvY2FsZVBhdGhdKSB7CiAgICByZXR1cm4gcmF3Q29uZmlnWyRsb2NhbGVQYXRoXTsKICB9CiAgcmV0dXJuIHJhd0NvbmZpZzsKfQoKLyoqDQogKiBTZXQgZ2xvYmFsIGluZm8gaW4gYHdpbmRvdy5fX1ZVRVBSRVNTX19gIGZvciBkZWJ1Z2dpbmcuDQogKg0KICogQHBhcmFtIHtzdHJpbmd9a2V5DQogKiBAcGFyYW0ge2FueX0gdmFsdWUNCiAqLwpleHBvcnQgZnVuY3Rpb24gc2V0R2xvYmFsSW5mbyhrZXksIHZhbHVlKSB7CiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnIHx8ICF3aW5kb3cuX19WVUVQUkVTU19fKSB7CiAgICByZXR1cm47CiAgfQogIHdpbmRvdy5fX1ZVRVBSRVNTX19ba2V5XSA9IHZhbHVlOwp9"},null]}