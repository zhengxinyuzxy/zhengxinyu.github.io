{"remainingRequest":"D:\\zhengxinyuzxy.github.io\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\zhengxinyuzxy.github.io\\node_modules\\@vuepress-reco\\vuepress-plugin-bgm-player\\bin\\BgMusic.vue?vue&type=style&index=0&id=b1d3339e&prod&lang=stylus&scoped=true&","dependencies":[{"path":"D:\\zhengxinyuzxy.github.io\\node_modules\\@vuepress-reco\\vuepress-plugin-bgm-player\\bin\\BgMusic.vue","mtime":1689759593199},{"path":"D:\\zhengxinyuzxy.github.io\\node_modules\\css-loader\\dist\\cjs.js","mtime":1689759594081},{"path":"D:\\zhengxinyuzxy.github.io\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1689759596391},{"path":"D:\\zhengxinyuzxy.github.io\\node_modules\\postcss-loader\\src\\index.js","mtime":1689759595505},{"path":"D:\\zhengxinyuzxy.github.io\\node_modules\\stylus-loader\\index.js","mtime":1689759596109},{"path":"D:\\zhengxinyuzxy.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1689759593638},{"path":"D:\\zhengxinyuzxy.github.io\\node_modules\\vue-loader\\lib\\index.js","mtime":1689759596391}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQpAcmVxdWlyZSAnLi9hc3NldHMvaWNvbmZvbnQvaWNvbmZvbnQuY3NzJw0KQGltcG9ydCAnLi9zdHlsZXMvaW5kZXguc3R5bCcNCg=="},{"version":3,"sources":["BgMusic.vue"],"names":[],"mappings":";AAkSA;AACA","file":"BgMusic.vue","sourceRoot":"node_modules/@vuepress-reco/vuepress-plugin-bgm-player/bin","sourcesContent":["<template>\r\n  <div class=\"reco-bgm-panel\">\r\n    <!-- 播放器 -->\r\n    <audio id=\"bgm\" :src=\"audio[curIndex].url\" ref=\"bgm\" @ended=\"bgmEnded\" @canplay=\"playReady\" @timeupdate=\"timeUpdate\"></audio>\r\n    <module-transition :position=\"floatPosition\">\r\n      <div v-show=\"isFloat\" @click=\"changeBgmInfo(false)\" class=\"reco-float-box\" :style=\"floatStyle\">\r\n        <img :src=\"audio[curIndex].cover\">\r\n      </div>\r\n    </module-transition>\r\n    <module-transition>\r\n      <div class=\"reco-bgm-box\" v-show=\"!isFloat\" :style=\"panelPosition\">\r\n        <!-- 封面 -->\r\n        <div class=\"reco-bgm-cover\" @click=\"changeBgmInfo(false)\" :style=\"`background-image:url(${audio[curIndex].cover})`\">\r\n          <!-- mini操作栏 -->\r\n          <div v-show=\"isMini\" class=\"mini-operation\">\r\n            <i v-show=\"this.curPlayStatus === 'playing' && isMini\" @click.stop=\"pauseBgm\" class=\"reco-bgm reco-bgm-pause\"></i>\r\n            <i v-show=\"this.curPlayStatus === 'paused' && isMini\" @click.stop=\"playBgm\" class=\"reco-bgm reco-bgm-play\"></i>\r\n          </div>\r\n          <!-- 错误信息显示 -->\r\n          <div v-show=\"isFault\" class=\"falut-message\">\r\n            播放失败\r\n          </div>\r\n        </div>\r\n        <module-transition duration=\".15\">\r\n          <!-- 歌曲信息栏 -->\r\n          <div v-show=\"!isMini\" class=\"reco-bgm-info\">\r\n            <!-- 歌曲名 -->\r\n            <div class=\"info-box\"><i class=\"reco-bgm reco-bgm-music music\"></i>{{ audio[curIndex].name }}</div>\r\n            <!-- 艺术家名 -->\r\n            <div class=\"info-box\"><i class=\"reco-bgm reco-bgm-artist\"></i>{{ audio[curIndex].artist }}</div>\r\n            <!-- 歌曲进度条 -->\r\n            <div class=\"reco-bgm-progress\">\r\n              <div class=\"progress-bar\" @click=\"progressJump\">\r\n                <div class=\"bar\" ref=\"pbar\"></div>\r\n              </div>\r\n            </div>\r\n            <!-- 歌曲操作栏 -->\r\n            <div class=\"reco-bgm-operation\">\r\n              <i class=\"reco-bgm reco-bgm-last last\" @click=\"playLast\"></i>\r\n              <i v-show=\"curPlayStatus === 'playing'\" @click=\"pauseBgm\" class=\"reco-bgm reco-bgm-pause pause\"></i>\r\n              <i v-show=\"curPlayStatus === 'paused'\" ref=\"play\" @click=\"playBgm\" class=\"reco-bgm reco-bgm-play play\"></i>\r\n              <i class=\"reco-bgm reco-bgm-next next\" @click=\"playNext\"></i>\r\n              <i v-show=\"!isMute\" @click=\"muteBgm\" class=\"reco-bgm reco-bgm-volume1 volume\"></i>\r\n              <i v-show=\"isMute\" @click=\"unMuteBgm\" class=\"reco-bgm reco-bgm-mute mute\"></i>\r\n              <div class=\"volume-bar\" @click=\"volumeJump\">\r\n                <div class=\"bar\" ref=\"vbar\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </module-transition>\r\n        <!-- 缩放按钮 -->\r\n        <module-transition duration=\".15\">\r\n          <div v-show=\"!isMini\" @click=\"changeBgmInfo(true)\" class=\"reco-bgm-left-box\">\r\n            <i class=\"reco-bgm reco-bgm-left\" ></i>\r\n          </div>\r\n        </module-transition>\r\n      </div>\r\n    </module-transition>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nlet InterVal\r\n// 歌曲封面的旋转角度\r\nlet rotateVal = 0\r\n// 歌曲封面的旋转\r\nfunction rotate () {\r\n  InterVal = setInterval(function () {\r\n    const cover = document.querySelector('.reco-bgm-cover')\r\n    const btn = document.querySelector('.mini-operation')\r\n    const fm = document.querySelector('.falut-message')\r\n    rotateVal += 1\r\n    // 设置旋转属性(顺时针)\r\n    cover.style.transform = 'rotate(' + rotateVal + 'deg)'\r\n    // 设置旋转时的动画  匀速0.1s\r\n    cover.style.transition = '0.1s linear'\r\n    // 设置旋转属性(逆时针)\r\n    btn.style.transform = 'rotate(-' + rotateVal + 'deg)'\r\n    // 设置旋转时的动画  匀速0.1s\r\n    btn.style.transition = '0.1s linear'\r\n    // 设置旋转属性(逆时针)\r\n    fm.style.transform = 'rotate(-' + rotateVal + 'deg)'\r\n    // 设置旋转时的动画  匀速0.1s\r\n    fm.style.transition = '0.1s linear'\r\n  }, 100)\r\n}\r\nimport volume from './mixins/volume.js'\r\nimport ModuleTransition from './ModuleTransition'\r\nexport default {\r\n  mixins: [volume],\r\n  components: {\r\n    ModuleTransition\r\n  },\r\n  mounted () {\r\n    if (this.floatPosition === 'left') {\r\n      this.floatStyle = {\r\n        ...this.floatStyle,\r\n        'left': '0',\r\n        'border-top-right-radius': '20px',\r\n        'border-bottom-right-radius': '20px'\r\n      }\r\n    } else {\r\n      this.floatStyle = {\r\n        ...this.floatStyle,\r\n        'right': '0',\r\n        'border-top-left-radius': '20px',\r\n        'border-bottom-left-radius': '20px'\r\n      }\r\n    }\r\n    // autoShrink为true时隐藏歌曲信息\r\n    if (this.autoShrink) this.changeBgmInfo(true)\r\n  },\r\n  data () {\r\n    return {\r\n      panelPosition: POSITION,\r\n      curIndex: 0,\r\n      curPlayStatus: 'paused',\r\n      audio: AUDIOS,\r\n      autoplay: AUTOPLAY,\r\n      isFloat: false,\r\n      isMini: false,\r\n      firstLoad: true,\r\n      isMute: false,\r\n      isFault: false,\r\n      floatPosition: FLOAT_POSITION,\r\n      floatStyle: FLOAT_STYLE,\r\n      autoShrink: AUTO_SHRINK,\r\n      shrinkMode: SHRINK_MODE\r\n    }\r\n  },\r\n  watch: {\r\n    'curPlayStatus': function (newVal) {\r\n      if (newVal === 'playing') {\r\n        rotate()\r\n      } else {\r\n        clearInterval(InterVal)\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    // 显示或隐藏歌曲信息\r\n    changeBgmInfo (bool) {\r\n      const isMobile = !!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\r\n        navigator.userAgent\r\n      )\r\n      if (isMobile || this.shrinkMode === 'float') {\r\n        this.isFloat = bool\r\n      } else if (!isMobile && this.shrinkMode === 'mini') {\r\n        this.isMini = bool\r\n      }\r\n    },\r\n    // audio canplay回调事件\r\n    playReady () {\r\n      // 第一次加载时初始化音量条并处理自动播放事件\r\n      if (this.firstLoad) {\r\n        if (this.getVolume()) {\r\n          const percent = this.getVolume()\r\n          this.$refs.vbar.style.width = percent * 100 + '%'\r\n          this.$refs.bgm.volume = percent\r\n        } else {\r\n          const vbar_width = this.$refs.bgm.volume * 100 + '%'\r\n          this.$refs.vbar.style.width = vbar_width\r\n        }\r\n        this.firstLoad = false\r\n        // 自动播放的处理\r\n        if (this.autoplay) {\r\n          const playPromise = this.$refs.bgm.play()\r\n          if (playPromise !== undefined) {\r\n            playPromise.then(res => {\r\n              console.log('vuepress-plugin-bgm-player: 自动播放成功')\r\n              this.curPlayStatus = 'playing'\r\n            }).catch(err => {\r\n              console.log('vuepress-plugin-bgm-player: 自动播放失败')\r\n              // DOMException: play() failed because the user didn‘t interact with the document first\r\n              // 监听用户点击事件实现自动播放\r\n              window.addEventListener(\"click\", this.pageClickHandle)\r\n            })\r\n          }\r\n        }\r\n      }\r\n      // 播放状态下歌曲准备完成立即播放\r\n      if (this.curPlayStatus === 'playing') {\r\n        this.playBgm()\r\n      }\r\n    },\r\n    pageClickHandle () {\r\n      // 自动播放的处理\r\n      if (this.autoplay) {\r\n        this.playBgm()\r\n      }\r\n      window.removeEventListener('click', this.pageClickHandle)\r\n    },\r\n    // 暂停\r\n    pauseBgm () {\r\n      this.$refs.bgm.pause()\r\n      this.curPlayStatus = 'paused'\r\n    },\r\n    // 播放\r\n    playBgm () {\r\n      const playPromise = this.$refs.bgm.play()\r\n      if (playPromise !== undefined) {\r\n        playPromise.then(res => {\r\n          if (this.isFault) {\r\n            this.isFault = false\r\n          }\r\n        // eslint-disable-next-line handle-callback-err\r\n        }).catch(err => {\r\n          console.log(err)\r\n          // 播放异常时显示播放失败并暂停播放\r\n          this.isFault = true\r\n          this.pauseBgm()\r\n        })\r\n      }\r\n      // this.$refs.bgm.play()\r\n      this.curPlayStatus = 'playing'\r\n    },\r\n    // 播放下一首\r\n    playNext () {\r\n      this.$refs.pbar.style.width = 0\r\n      this.isFault = false\r\n      if (this.curIndex >= this.audio.length - 1) {\r\n        this.curIndex = 0\r\n      } else {\r\n        this.curIndex++\r\n      }\r\n    },\r\n    // 播放上一首\r\n    playLast () {\r\n      this.$refs.pbar.style.width = 0\r\n      this.isFault = false\r\n      if (this.curIndex <= 0) {\r\n        this.curIndex = this.audio.length - 1\r\n      } else {\r\n        this.curIndex--\r\n      }\r\n    },\r\n    // bgm结束时自动下一首\r\n    bgmEnded () {\r\n      this.$refs.pbar.style.width = 0\r\n      this.playNext()\r\n    },\r\n    // 更新歌曲进度条\r\n    timeUpdate () {\r\n      const total_time = this.$refs.bgm.duration\r\n      const cur_time = this.$refs.bgm.currentTime\r\n      const bar_width = cur_time / total_time * 100 + '%'\r\n      this.$refs.pbar.style.width = bar_width\r\n    },\r\n    // 点击进度条跳播\r\n    progressJump (e) {\r\n      const total_time = this.$refs.bgm.duration\r\n      const percent = e.offsetX / 150\r\n      // 歌曲未加载完成时点击进度条的错误处理\r\n      if (isNaN(total_time)) return\r\n      this.$refs.bgm.currentTime = percent * total_time\r\n    },\r\n    // 点击音量条修改音量\r\n    volumeJump (e) {\r\n      const percent = e.offsetX / 57\r\n      if (percent >= 0 && percent <= 1) {\r\n        this.isMute = !(percent > 0)\r\n        this.$refs.vbar.style.width = percent * 100 + '%'\r\n        this.$refs.bgm.volume = percent\r\n        this.setVolume(this.$refs.bgm.volume)\r\n      }\r\n    },\r\n    // 静音\r\n    muteBgm () {\r\n      this.isMute = true\r\n      this.setVolume(this.$refs.bgm.volume)\r\n      this.$refs.vbar.style.width = 0\r\n      this.$refs.bgm.volume = 0\r\n    },\r\n    // 取消静音\r\n    unMuteBgm () {\r\n      this.isMute = false\r\n      if (this.getVolume()) {\r\n        const percent = this.getVolume()\r\n        this.$refs.vbar.style.width = percent * 100 + '%'\r\n        this.$refs.bgm.volume = percent\r\n      } else {\r\n        this.$refs.vbar.style.width = '100%'\r\n        this.$refs.bgm.volume = 1\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"stylus\" scoped>\r\n@require './assets/iconfont/iconfont.css'\r\n@import './styles/index.styl'\r\n</style>\r\n"]}]}