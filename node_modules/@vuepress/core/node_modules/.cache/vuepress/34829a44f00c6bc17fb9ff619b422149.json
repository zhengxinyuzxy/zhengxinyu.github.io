{"remainingRequest":"D:\\zhengxinyuzxy.github.io\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!D:\\zhengxinyuzxy.github.io\\node_modules\\vuepress-theme-reco\\helpers\\utils.js","dependencies":[{"path":"D:\\zhengxinyuzxy.github.io\\node_modules\\vuepress-theme-reco\\helpers\\utils.js","mtime":1689759596515},{"path":"D:\\zhengxinyuzxy.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1689759593638},{"path":"D:\\zhengxinyuzxy.github.io\\node_modules\\babel-loader\\lib\\index.js","mtime":1689759593547}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}